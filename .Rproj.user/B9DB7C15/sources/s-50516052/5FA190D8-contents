---
title: "Mapping and Filtering"
output: 
  html_document:
    df_print: paged
    css: "style.css"
---

<head>
<script src="https://kit.fontawesome.com/ece750edd7.js" crossorigin="anonymous"></script>
</head>

<br>

### 6. Read Alignment

In this workshop we are going to align our ChIP-seq reads to the yeast reference genomes for Saccharomyces cerevisiae and Schizosaccharomyces pombe. 
There are many tools available for mapping reads each with their own purposes and strengths. We will be using MiniMap2.

In order to calibrate this data we need to map it four times, twice each to sacCer3 and Pombe. The initial mapping steps is in order to isolate reads which *do not* map to a given genome, the second mapping then maps these unmapped reads to the other genome. This gives us reads mapping only to each genome and filters out reads which would map to both. 

<img src="images/diag.png" width=1200>
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4787748/

For the purpose of this workshop we are just going to run through one half of this process (the other half being identical except for which genomes are used). We will however run the entire pipeline later so that we can perform the calibration.

For simplicity we will run a single sample through the step-by-step mapping process but when we run the full pipeline we will run multiple samples simultaneously.

<br>

### Genome assemblies and indexing

First, we need to select a reference genome to align to. Every time a reference genome is released or updated it is given a new name, often referred to as the genome build or assembly (..hg18, hg19, hg38). It is important to realise that different builds of the same genome are different sequences and thus their co-ordinate sytsems are incompatable. For instance position 10000000 on chr1 is T in hg19 and G in hg38. 

We are going to map our reads to the latest release of the yeast genome **sacCer3**, as well as **ASM294v2.22** for pombe.

These are on the server under ~genomes

~genomes/s.cerevisiae/sacCer3/sacCer3.fa

~genomes/s.pombe/ASM294v2.22/ASM294v2.22.fa

<br>

### Mapping reads
First we will align our trimmed Fastq reads to the Pombe (calibration) genome

<div class="blue">
```bash

### First mapping to **Calibration** Genome

mkdir mm2_out

# Map trimmed reads to calibration genome with Minimap2 (paired end)
minimap2 -ax sr ~genomes/s.pombe/ASM294v2.22/ASM294v2.22.fa fastq/WT_IP_R1.trimmed.fastq.gz fastq/WT_IP_R2.trimmed.fastq.gz > mm2_out/WT_IP.calibration.mm2.sam
```
</div>

(sr = short genomic paired-end reads)


<br>

This should only take a few minutes...

<br>

### SAM/BAM/CRAM format and Samtools

The standard output for most mapping software is SAM (sequence alignment/map format). SAM files contain many columns that describe the position of each alignment as well as information on the quality of the alignment, mismatches, the number of times a read mapped, mapping of paired ends and other custom flags and statistics. SAM files can be very large so there are compressed alternatives BAM and CRAM. The [samtools](http://www.htslib.org/doc/samtools.html) package has many useful tools for viewing and manipulating files in SAM format. We will use some of these below.

Take a look at the [SAM format specification](https://samtools.github.io/hts-specs/SAMv1.pdf) and the first few lines of your SAM output using samtools:

```bash
samtools view mm2_out/WT_IP.calibration.mm2.sam | less 
```

The second column is the **SAM flag** and contains coded information about each alignment. Use the [Explain SAM flags](https://broadinstitute.github.io/picard/explain-flags.html) resource to find out more about the alignments in your file.

We can also see the samtools header using the -h flag which contains information on the parameters and indexes used to create the file.

```bash
samtools view -h mm2_out/WT_IP.calibration.mm2.sam | less
```

Here, we are using samtools to output only unmapped reads (flag=4), while converting the SAM file into BAM, this is a binary format to save disk space. 

<div class="blue">
```bash
# SAM to BAM (keep unmapped reads only)
samtools view -Sbh -f 4 mm2_out/WT_IP.calibration.mm2.sam -o mm2_out/WT_IP.calibration.mm2.unmapped.bam
```
</div>

This step converts our unmapped BAM file into a new fastq file (which we will map soon), note both reads are interleaved into one file.

<div class="blue">
```bash
# interleaved (keep in single fastq)
samtools bam2fq mm2_out/WT_IP.calibration.mm2.unmapped.bam > mm2_out/WT_IP.calibration.mm2.unmapped.fastq
```
</div>

Here we are simply compressing the file.

<div class="blue">
```bash
gzip mm2_out/WT_IP.calibration.mm2.unmapped.fastq
```
</div>

Take a look at the contents of the *output* directory now. The -lh flag prints out a directory in list view with human readable file sizes.

```bash
ls -lh mm2_out/*  
```

Notice the difference in size between the SAM and BAM files and the .bai file which is the bam index. 

### Mapping Step 2

The next step involves mapping the reads which did not map to the pombe (calibration genome) to our experimental genome (sacCer3).

<div class="blue">
```bash
# Map unmapped calibration genome to experimental genome with Minimap2 (interleaved)
# input mm2_out/WT_IP.calibration.mm2.unmapped.fastq
minimap2 -ax sr ~genomes/s.cerevisiae/sacCer3/sacCer3.fa mm2_out/WT_IP.calibration.mm2.unmapped.fastq.gz > mm2_out/WT_IP.experimental.only.mm2.sam
```
</div>

As before, we are using samtools to convert our SAM to BAM, this time we are only keeping the mapped reads, technically we are excluding (-F) unmapped reads (4). 

<div class="blue">
```bash

# SAM to BAM to sort (mapped reads only)
samtools view -Sbh -F 4 mm2_out/WT_IP.experimental.only.mm2.sam -o mm2_out/WT_IP.experimental.only.mm2.bam
```
</div>

We are also sorting the BAM file as this is required by certain tools downstream.

<div class="blue">
```bash
samtools sort -@ 5 mm2_out/WT_IP.experimental.only.mm2.bam -o mm2_out/WT_IP.experimental.only.mm2.sorted.bam
```
</div>

The sorted BAM file can also be indexed to allow quick programmatic access for visualisation and processing. 

<div class="blue">
```bash
samtools index mm2_out/WT_IP.experimental.only.mm2.sorted.bam
```
</div>

Let's look at the BAM files using `samtools idxstats` to see where our reads align

```bash
samtools idxstats mm2_out/WT_IP.experimental.only.mm2.sorted.bam
``` 
The third column represents the number of alignments to each chromosome.

Samtools flagstat tells us mapping values across the whole genome, this will be useful for normalization and calibration so we will save the output to file.

<div class="blue">
```bash
samtools flagstat mm2_out/WT_IP.experimental.only.mm2.sorted.bam > mm2_out/WT_IP.experimental.only.mm2.bam.fs
```
</div>

<br>

### 7. Post processing

<br>

<!--### Filtering reads with samtools

Now that we have aligned our reads we may want to do some filtering before any downstream analysis. Make sure you are aware of the alignments that are reported by your mapping program and the parameters used. For instance, are unmapped reads reported? Are all alignments to repeats reported or just one? Are paired-end alignments still reported if only one end maps? 

There are many ways to filter your BAM files with samtools and other programs to remove unwanted alignments that may negatively affect your downstream analysis. This will not be covered in depth here, instead we will simply remove all non-uniquely mapped reads. These reads map to multiple regions of the genome and can skew classification of peaks in our data. In this case we are not interested in looking at repeat regions of the genome so we will remove these reads. This can be done by filtering out all reads with [mapping quality](http://genome.sph.umich.edu/wiki/Mapping_Quality_Scores) less than 20.

<br>

### Multimap reads and Duplicate reads

Multimap and duplicate reads are often confused so it is important to understand what these are and how they affect your data:

* **Multimap reads** = The read exists once in your library and aligns to multiple repeat locations in the reference genome
* **Duplicate reads** = Multiple reads with the same sequence align to identical locations in the genome. 

<img src="images/multi.png" alt="pic" width="600"/>

**Multimap reads** are difficult to analyse as their ambiguity can confound results. Many applications require the use of **unique** alignments only, thus multimap reads need to be removed from your BAM file. Aligners assign a **mapping quality** to each read (column 5 in BAM) between 0 and 255 that describes its confidence in the alignment position. Assigned [mapping qualities differ between mappers](https://sequencing.qcfail.com/articles/mapq-values-are-really-useful-but-their-implementation-is-a-mess/) and BWA uses a phred score to measure the accuracy of an alignment. Filtering out reads with a mapping quality < 20 means that all remaining alignment positions are 99% accurate. We can use `samtools view -q` to filter based on mapping quality

<div class="blue">
```bash
samtools view -b -q 20 mm2_out/1145-Glu-IP_S4.experimental.only.mm2.bam -o mm2_out/1145-Glu-IP_S4.experimental.only.mm2.uniq.bam

samtools index mm2_out/1145-Glu-IP_S4.experimental.only.mm2.uniq.bam
samtools flagstat mm2_out/1145-Glu-IP_S4.experimental.only.mm2.uniq.bam > mm2_out/1145-Glu-IP_S4.experimental.only.mm2.uniq.bam.fs

```
</div>

Note that there are aligners and analysis packages that attempt to deal with multimap reads and assign weights to each alignment, although methods are still in development. If you are interested in repeat elements or don't want to discard any potentially useful information then you will need a strategy to deal with these reads.

**Duplicate reads** are often observed as tall spikes in your read depth profile where reads are stacked directly on top of each other. A high level of duplication in your library is often a sign of over amplification by PCR and we may want to remove this bias from our result. However, these reads may also derive from separate fragments of DNA in your sample, thus we would be removing real data. It is often a good idea to **mark** your duplicate reads and produce outputs both with and without duplicates for comparison. Read more about duplication bias [here](https://sequencing.qcfail.com/articles/libraries-can-contain-technical-duplication/).

The [Picard](https://broadinstitute.github.io/picard/index.html) package has many useful utilities for manipulating SAM/BAM files. The MarkDuplicates tool will check the alignment positions for duplicate reads and mark or remove them from your data depending on how you wish to treat them.

Using paired-end reads or random primers in your library preparation can help separate some of the original reads from PCR duplicates.

<br>

-->

### Genome blacklists

The ENCODE project produced 100s of NGS datasets and found that certain regions of the genome were consistently prone to overinflated read depths regardless of the sample or preparation. Some of these are repeats of variable copy number, others are likely to be similar to [repeat regions in unsequenced portions of the genome](https://sequencing.qcfail.com/articles/genomic-sequence-not-in-the-genome-assembly-creates-mapping-artefacts/) (telomeres, centromeres, satellites etc.). These are typically seen as large towers of reads that dominate your read profiles. It is probably a good idea to remove these regions from downstream analyses or remove the reads that align all together. ENCODE subsequently released genome blacklists for human and mouse, for other species you can identify these regions by eye.

[BedTools](http://bedtools.readthedocs.org/en/latest/) is an extremely useful tool suite for performing operations on genomic intervals and alignments and comparing multiple datasets. The intersect tool can find overlaps between reads in a BAM file `-abam` and blacklist regions in a [bed](https://genome.ucsc.edu/FAQ/FAQformat.html#format1) file `-b` and output all the reads that DON'T intersect `-v`.

<img src="images/intersect-glyph.png" width=700>

In some cases you may also want to remove ribosomal RNA/DNA reads that make up a bulk of your sample.

<br>

This is true with our data mapped to sacCer3, we can see a lot of reads mapping to an repetitive region on chromosome 12, rDNA.bed contains the coordinates for this over saturated area.

<!-- example pics / demo-->

<div class="blue">
```bash
# Remove rDNA regions (chrXII saturated with reads)
bedtools intersect -v -abam mm2_out/WT_IP.experimental.only.mm2.sorted.bam -b rDNA.bed > mm2_out/WT_IP.experimental.only.mm2.rDNA.bam

```
</div>

Let's index and create a flagstat file for our new filtered bam file.

<div class="blue">
```bash
samtools index mm2_out/WT_IP.experimental.only.mm2.rDNA.bam
```
</div>

<div class="blue">
```bash
samtools flagstat mm2_out/WT_IP.experimental.only.mm2.rDNA.bam
```
</div>


<br>


<!--### How many reads?

As we used the -a flag when aligning **bwa** outputs multiple alignments per read if they exist, meaning a read may have many entries within a BAM file. However, bwa will assign one of the best hits as a primary alignment and all the others as secondary. Unmapped reads are also printed to the output file and these two factors mean that the total number of lines does not correspond to the total number of mapped reads. 

`samtools view` can tell us how many lines are in a bam file using the -c flag to count. We can filter alignments using -f (keep) or -F (discard) on the SAM flag column. 

```bash
samtools view -c bwa_out/Reb1_R1/Reb1_R1.bam
```
5444557
```bash
samtools view -c -f 4 bwa_out/Reb1_R1/Reb1_R1.bam 
# counts number of unmapped reads (flag = '4')
```
144915
-->


<!--* How many of these align to a single location on the genome?
* How many have a MAPQ score above 20?
###Challenge
<div class="challenge">
<h2><i class="fas fa-pencil-alt"></i> Challenge:</h2>

* How many mapped reads do you have?


<details>
<summary>
Solution
</summary>
<div class="solution">
<h2><i class="far fa-eye"></i></h2>
```bash
samtools view -c -F 4 bwa_out/Reb1_R1/Reb1_R1.bam 
# -F 4 filters out unmapped reads
```
Reb1_R1 has 5299642 mapped reads

```bash
samtools view -c -F 260 bwa_out/Reb1_R1/Reb1_R1.bam
# -F 260 filters out unmapped reads (4) and non primary alignments (256)
```
2572126 reads map to a single 'unique' location

```bash
samtools view -c -q 20 bwa_out/Reb1_R1/Reb1_R1.bam
```
1967026 reads have a MAPQ > 20

Note our filtered uniq.bams have excluded unmapped/non primary and MAPQ < 20 all in one.
```bash
samtools view -c bwa_out/Reb1_R1/Reb1_R1.uniq.bam
```
1967026

</div>
</details>
</div>
<br>
**Hint:** Use the [Explain SAM flags](https://broadinstitute.github.io/picard/explain-flags.html) resource.

We can also use **fastqc** on bam files to look at the quality and statistics for our uniquely mapped reads.

<div class="blue">
```bash
cat samples.txt | parallel -j 4 fastqc bwa_out/{}/{}.uniq.bam
multiqc -o bwa_out bwa_out
```
</div>

<div class="key-points">
<h2><i class="fas fa-thumbtack"></i>Key Aims:</h2>
##
 * Align reads to a reference genome
 * Understand key file formats
 * Filter alignments for further analyses
</div>
<br>

-->

